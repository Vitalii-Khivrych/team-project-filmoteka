{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-04092dbdc2b646d2.js","src/js/api-service.js","src/js/refs.js","src/js/templates/render-popular-card.js","node_modules/@parcel/runtime-js/lib/runtime-4fa5c1d39a5484ed.js","src/js/templates/render-gallery.js","src/index.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"5ZPII\\\":\\\"index.7e504c75.js\\\",\\\"2L4JT\\\":\\\"poster.eca3a33b.jpg\\\",\\\"5UbS1\\\":\\\"index.f4450d5c.css\\\"}\"));","const BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '81f57ce8a5863d84fdab7c29ba0c37c2';\n\nexport default class ApiService {\n  constructor() {\n    this.searchQuery = '';\n    this.page = 1;\n    this.searchId = '66732';\n  }\n\n  fetchGenres(type) {\n    const url = `${BASE_URL}/genre/${type}/list?api_key=${KEY}&language=en-US`;\n    return fetch(url).then(res => res.json());\n  }\n\n  fetchTrending() {\n    const url = `${BASE_URL}/trending/all/day?api_key=${KEY}&page=${this.page}`;\n\n    return fetch(url).then(res => res.json());\n  }\n\n  fetchSearchMovie() {\n    const url = `${BASE_URL}/search/movie?api_key=${KEY}&language=en-US&query=${this.searchQuery}&page=${this.page}&include_adult=false`;\n\n    return fetch(url).then(res => res.json());\n  }\n\n  fetchMovieDetails(movieId) {\n    const url = `${BASE_URL}/movie/${movieId}?api_key=${KEY}&language=en-US`;\n\n    return fetch(url).then(res => res.json());\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n\n  set pageNumber(number) {\n    this.page = number;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n\n  get movieId() {\n    return this.searchId;\n  }\n\n  set movieId(newId) {\n    this.searchId = newId;\n  }\n}\n\n//\n","const refs = {\n  searchInput: document.querySelector('#search-movie'),\n  backdrop: document.querySelector('.backdrop'),\n  galleryList: document.querySelector('.gallery'),\n  openTeamModalBtn: document.querySelector('.footer__button'),\n  closeTeamModalBtn: document.querySelector('.team-modal__btn-close'),\n  backdropTeamModal: document.querySelector('.backdrop__team-modal'),\n};\n\nexport default refs;\n","import refs from '../refs';\nimport Api from '../api-service';\n// import ApiService from '../api-service';\n//import { appService } from '../../index';\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500/';\nconst appService = new Api();\n\nappService.fetchTrending().then(handleResponse);\n\nfunction handleResponse(response) {\n  const cards = response.results;\n  console.log(response);\n\n  Promise.all([appService.fetchGenres('movie'), appService.fetchGenres('tv')])\n    .then(allGenres => {\n      const genres = allGenres.map(r => r.genres);\n      const mergedGenres = [].concat.apply([], genres);\n      const genreMap = new Map(\n        mergedGenres.map(object => {\n          return [object.id, object.name];\n        })\n      );\n      renderPopularCards(cards, genreMap);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n}\n\nfunction renderPopularCards(cards, genres) {\n  console.log(cards);\n  console.log(genres);\n  const markup = cards\n    .map(\n      ({\n        poster_path,\n        original_title,\n        original_name,\n        genre_ids,\n        release_date,\n        first_air_date,\n        vote_average,\n        id,\n      }) => {\n        const date = release_date ? release_date : first_air_date;\n        const name = original_title ? original_title : original_name;\n        const dateArr = date.split('-');\n        const year = dateArr[0];\n        console.log(year);\n        console.log(genre_ids);\n        const genreArr = genre_ids.slice(0, 2).map(id => genres.get(id));\n\n        if (genre_ids.length > 2) {\n          genreArr.push('others');\n        }\n\n        const genreStr = genreArr.join(', ');\n        console.log(genreStr);\n        const vote = vote_average.toFixed(1);\n        return `<li class=\"gallery__item card\" data-id=\"${id}\">\n          <img\n            class=\"card__image\"\n            src=\"${IMG_URL}${poster_path}\"\n            alt=\"poster\"\n            loading=\"lazy\"\n          />\n          <div class=\"card__info\" >\n            <p class=\"card__title\">${name}</p>\n            <div class=\"card__movie-info\">\n              <p class=\"card__genre\">${genreStr}</p>\n              <span class=\"vertical\">&nbsp|&nbsp</span>\n              <p class=\"card__release\">${year}</p>\n              <p class=\"card__rating\">${vote}</p>\n            </div>\n          </div>\n      </li>`;\n      }\n    )\n    .join('');\n\n  refs.galleryList.insertAdjacentHTML('beforeend', markup);\n\n  console.log(markup);\n}\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"2L4JT\")).toString();","const galleryEl = document.querySelector('.gallery');\nconst galleryButtonListEl = document.querySelector('.gallery-button-list');\nconst numberMassiveGallery = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\nimport imgLink from '../../images/poster.jpg';\nconst galleryRender = () => {\nconst markup = numberMassiveGallery.map((element) => `<li class=\"gallery__item card\">\n<a href=\"\" class=\"card__link\">\n  <img\n    class=\"card__image\"\n    src=\"${imgLink}\"\n    alt=\"\"\n    loading=\"lazy\"\n  />\n  <div class=\"card__info\">\n    <p class=\"card__title\">A FISTFUL OF LEAD</p>\n    <div class=\"card__movie-info\">\n      <p class=\"card__genre\">Western</p>\n      <span class=\"vertical\">&nbsp|&nbsp</span>\n      <p class=\"card__release\">2019</p>\n      <p class=\"card__rating\">7.3</p>\n    </div>\n  </div>\n</a>\n</li>`).join(\"\");\ngalleryEl.insertAdjacentHTML(\"beforeend\", markup);\n}\ngalleryRender();\nexport default galleryRender;","import './sass/index.scss';\n\nimport Api from './js/api-service';\nimport refs from './js/refs';\nimport renderModalCard from './js/templates/render-card-modal';\nimport renderPopularCard from './js/templates/render-popular-card';\nimport galleryRender from './js/templates/render-gallery';\nimport renderFooter from './js/templates/render-footer';\n\nconst appService = new Api();\n\n// -------------Для рендеру карток головної сторінки-----------\n// appService.fetchTrending().then(console.log)   // Повертає об'єкт, в якому є масив з фільмами, номер поточної сторінки, кількість сторінок і скільски всього знайдено відео\n// ------------------------------------------------\n\n// -------------Поіск фільму по назві-----------\n// refs.searchInput.addEventListener('submit', onSearchMovie);\n\nfunction onSearchMovie(e) {\n  e.preventDefault();\n\n  appService.query = e.currentTarget.elements.searchQuery.value.trim();\n\n  const isEmptySearch = appService.searchQuery === '';\n\n  if (isEmptySearch) {\n    console.log('Пустий пошук');\n    //Зробити повідомлення про пустий пошук\n    return;\n  }\n\n  appService.resetPage();\n  appService.fetchSearchMovie().then(console.log);\n}\n// ------------------------------------------------\n// тест відкриття модали з ID фшльму 12 (розкоментуй renderModalCard)\n// renderModalCard(12);\n// експорт для доступу в функції renderModalCard\nexport { appService };\n"],"names":["$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$55b58e231f028392$export$2e2bcd8739ae039","fetchGenres","type","fetch","then","res","json","fetchTrending","url","this","page","fetchSearchMovie","searchQuery","fetchMovieDetails","movieId","incrementPage","pageNumber","number","resetPage","query","newQuery","searchId","newId","constructor","$ee27a4d7c64fc8c4$export$2e2bcd8739ae039","searchInput","document","querySelector","backdrop","galleryList","openTeamModalBtn","closeTeamModalBtn","backdropTeamModal","$1c2eb5d764315a92$var$appService","response","cards","results","console","log","Promise","all","allGenres","genres","map","r","mergedGenres","concat","apply","genreMap","Map","object","name","markup","poster_path","original_title","original_name","genre_ids","release_date","first_air_date","vote_average","id1","year","split","genreArr","slice","get","push","genreStr","join","toFixed","insertAdjacentHTML","$1c2eb5d764315a92$var$renderPopularCards","catch","error","$6495a145ec0942df$exports","URL","resolve","import","meta","toString","$3f53782452ca4b1b$var$galleryEl","$3f53782452ca4b1b$var$numberMassiveGallery","$3f53782452ca4b1b$var$galleryRender","element","$parcel$interopDefault"],"version":3,"file":"index.7e504c75.js.map"}